name: AWS deploy

on:
  push:
    branches:
      - master

permissions:
  id-token: write # This is required for requesting the JWT

env:
  ECR_REPOSITORY: aws-training-ecr
  IMAGE_TAG: latest
  AWS_REGION: us-east-1
  JAVA_VERSION: 17
  GRADLE_VERSION: 8.5

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Build Spring Boot Application with Gradle
        run: |
          chmod +x gradlew
          ./gradlew build   

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::237033183304:role/GitHubActionsRol
          aws-region: us-east-1
     # - name: Test AWS Authentication
     #   run: |
     #     aws sts get-caller-identity
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

      - name: Tag Docker image
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Push Docker image to Amazon ECR
        run: |
          docker push $IMAGE_URI    
